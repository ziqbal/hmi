
transactions err and nil


import (

    "github.com/boltdb/bolt"

)


var dbMain = [ ]byte( "main" )


....
    db, err := bolt.Open( exPath + "/hmi.db" , 0600 , &bolt.Options{ Timeout : 1 * time.Second } )

    if( err != nil ) {

        log.Fatal( "Database Opening Error! Exiting..." )
        log.Fatal( err )

    }

    defer db.Close( )
....

... create bucket with key/val

    key := [ ] byte( "key1" )

    value := [ ] byte( "val1" )

    err = db.Update(func(tx *bolt.Tx) error {
        bucket, err := tx.CreateBucketIfNotExists(dbMain)
        if err != nil {
            return err
        }

        err = bucket.Put(key, value)
        if err != nil {
            return err
        }
        return nil
    })

    if err != nil {
        log.Fatal(err)
    }


... retrieve the data
    err = db.View(func(tx *bolt.Tx) error {
        bucket := tx.Bucket(dbMain)
        if bucket == nil {
            return fmt.Errorf("Bucket %q not found!", dbMain)
        }

        val := bucket.Get(key)
        fmt.Println(string(val))

        return nil
    })

    if err != nil {
        log.Fatal(err)
    }



